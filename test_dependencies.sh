#!/bin/bash

# Script de test des d√©pendances pour ESPAsyncWebClient
# Teste la compatibilit√© avec diff√©rentes versions d'AsyncTCP

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TEST_DIR="/tmp/dep_test"
LIB_DIR="$TEST_DIR/lib/ESPAsyncWebClient"

echo -e "${BLUE}=== Test des d√©pendances ESPAsyncWebClient ===${NC}"
echo "Date: $(date)"
echo "R√©pertoire de test: $TEST_DIR"
echo ""

# Fonction pour afficher les r√©sultats
print_result() {
    local env_name="$1"
    local status="$2"
    local duration="$3"
    
    if [ "$status" = "SUCCESS" ]; then
        echo -e "${GREEN}‚úÖ $env_name: R√âUSSI${NC} (${duration}s)"
    else
        echo -e "${RED}‚ùå $env_name: √âCHEC${NC} (${duration}s)"
    fi
}

# Fonction pour nettoyer l'environnement de test
cleanup() {
    echo -e "${YELLOW}üßπ Nettoyage...${NC}"
    if [ -d "$TEST_DIR" ]; then
        rm -rf "$TEST_DIR"
    fi
}

# Nettoyage en cas d'interruption
trap cleanup EXIT

# √âtape 1: Cr√©ation de la structure de r√©pertoires
echo -e "${YELLOW}üìÅ Cr√©ation de la structure de test...${NC}"
mkdir -p "$LIB_DIR"

# √âtape 2: Copie des fichiers de la biblioth√®que
echo -e "${YELLOW}üìã Copie des fichiers de la biblioth√®que...${NC}"
cp -r /workspaces/ESPAsyncWebClient/* "$LIB_DIR/"

# V√©rification que les fichiers essentiels sont pr√©sents
if [ ! -f "$LIB_DIR/platformio.ini" ]; then
    echo -e "${RED}‚ùå Erreur: platformio.ini non trouv√©${NC}"
    exit 1
fi

if [ ! -f "$LIB_DIR/test/compile_test.cpp" ]; then
    echo -e "${RED}‚ùå Erreur: test/compile_test.cpp non trouv√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Structure de test cr√©√©e avec succ√®s${NC}"
echo ""

# √âtape 3: Test des diff√©rents environnements
echo -e "${BLUE}üß™ D√©but des tests de compilation...${NC}"
echo ""

cd "$LIB_DIR"

# D√©finition des environnements √† tester
declare -A environments=(
    ["compile_test"]="Test de compilation basique (sans r√©seau)"
    ["esp32dev_asynctcp_dev"]="AsyncTCP ESP32Async/main (d√©veloppement)"
    ["test_asynctcp_stable"]="AsyncTCP ESP32Async stable"
)

# Variables pour le r√©sum√©
total_tests=0
passed_tests=0
failed_tests=0
declare -A results

echo -e "${YELLOW}Environnements √† tester:${NC}"
for env in "${!environments[@]}"; do
    echo "  - $env: ${environments[$env]}"
    total_tests=$((total_tests + 1))
done
echo ""

# Ex√©cution des tests
for env in "${!environments[@]}"; do
    echo -e "${BLUE}üîß Test de l'environnement: $env${NC}"
    echo "Description: ${environments[$env]}"
    
    start_time=$(date +%s)
    
    if pio run -e "$env" --silent; then
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        print_result "$env" "SUCCESS" "$duration"
        results[$env]="SUCCESS:$duration"
        passed_tests=$((passed_tests + 1))
    else
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        print_result "$env" "FAILED" "$duration"
        results[$env]="FAILED:$duration"
        failed_tests=$((failed_tests + 1))
        
        # Affichage des derni√®res lignes de log en cas d'erreur
        echo -e "${YELLOW}üìÑ Derni√®res lignes du log d'erreur:${NC}"
        pio run -e "$env" 2>&1 | tail -10 | sed 's/^/  /'
    fi
    echo ""
done

# √âtape 4: R√©sum√© final
echo -e "${BLUE}üìä R√âSUM√â DES TESTS${NC}"
echo "=================================="
echo "Total des tests: $total_tests"
echo -e "Tests r√©ussis: ${GREEN}$passed_tests${NC}"
echo -e "Tests √©chou√©s: ${RED}$failed_tests${NC}"
echo ""

echo "D√©tails par environnement:"
for env in "${!environments[@]}"; do
    IFS=':' read -r status duration <<< "${results[$env]}"
    if [ "$status" = "SUCCESS" ]; then
        echo -e "  ${GREEN}‚úÖ${NC} $env (${duration}s)"
    else
        echo -e "  ${RED}‚ùå${NC} $env (${duration}s)"
    fi
done

echo ""

# V√©rification des versions AsyncTCP install√©es
echo -e "${BLUE}üì¶ VERSIONS DES D√âPENDANCES${NC}"
echo "=================================="

if [ -d ".pio/libdeps" ]; then
    for env_dir in .pio/libdeps/*/; do
        env_name=$(basename "$env_dir")
        echo "Environnement: $env_name"
        
        if [ -d "$env_dir/AsyncTCP" ]; then
            asynctcp_path="$env_dir/AsyncTCP"
            if [ -f "$asynctcp_path/.git/HEAD" ]; then
                commit=$(cd "$asynctcp_path" && git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                echo "  AsyncTCP: commit $commit"
            else
                echo "  AsyncTCP: version inconnue"
            fi
        fi
        
        if [ -d "$env_dir/ArduinoJson" ]; then
            echo "  ArduinoJson: install√©"
        fi
        echo ""
    done
fi

# Code de sortie final
if [ $failed_tests -eq 0 ]; then
    echo -e "${GREEN}üéâ Tous les tests ont r√©ussi !${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  $failed_tests test(s) ont √©chou√©${NC}"
    exit 1
fi
