name: Build Examples

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        example: [SimpleGet, PostWithData, MultipleRequests, CustomHeaders, CompileTest]
        platform: [esp32dev]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Create temporary project for example
      run: |
        example_name="${{ matrix.example }}"
        test_dir="/tmp/test_${example_name}_${{ matrix.platform }}"
        
        echo "Creating test project for ${example_name} on ${{ matrix.platform }}..."
        mkdir -p "$test_dir/src"
        mkdir -p "$test_dir/lib/ESPAsyncWebClient"
        
        # Copy example as main source (rename .ino to .cpp)
        cp "examples/${example_name}/${example_name}.ino" "$test_dir/src/main.cpp"
        
        # Copy library source
        cp -r src/* "$test_dir/lib/ESPAsyncWebClient/"
        
        # Create platformio.ini specific for this test
        cat > "$test_dir/platformio.ini" << EOF
        [platformio]
        default_envs = test_env
        
        [env:test_env]
        platform = ${{ matrix.platform == 'esp32dev' && 'espressif32' }}
        board = ${{ matrix.platform }}
        framework = arduino
        monitor_speed = 115200
        build_flags = 
            -DCOMPILE_TEST_ONLY
            -Wall
        lib_deps = 
            ${{ matrix.platform == 'esp32dev' && 'https://github.com/ESP32Async/AsyncTCP.git' }}
            bblanchon/ArduinoJson@^6.21.0
        EOF
        
        echo "Created test structure:"
        ls -la "$test_dir"
        echo "platformio.ini content:"
        cat "$test_dir/platformio.ini"
    
    - name: Build example
      run: |
        example_name="${{ matrix.example }}"
        test_dir="/tmp/test_${example_name}_${{ matrix.platform }}"
        cd "$test_dir"
        
        echo "Building ${example_name} for ${{ matrix.platform }}..."
        echo "Source file:"
        head -20 src/main.cpp
        
        pio run -v

  syntax-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Check library syntax
      run: |
        # Create a minimal test sketch to check library compilation
        test_dir="/tmp/syntax_check"
        mkdir -p "$test_dir/src"
        mkdir -p "$test_dir/lib/ESPAsyncWebClient"
        
        # Create minimal test source
        cat > "$test_dir/src/main.cpp" << 'EOF'
        #include <Arduino.h>
        
        #include <WiFi.h>
        #include <AsyncTCP.h>
        #include <ESPAsyncWebClient.h>
        
        AsyncHttpClient client;
        
        void setup() {
            Serial.begin(115200);
            // Test that the library compiles without errors
            client.setTimeout(5000);
            client.setUserAgent("ESPAsyncWebClient/1.0");
            client.setHeader("Content-Type", "application/json");
            Serial.println("Syntax check passed!");
        }
        
        void loop() {
            delay(1000);
        }
        EOF
        
        # Copy library source
        cp -r src/* "$test_dir/lib/ESPAsyncWebClient/"
        
        # Create platformio.ini
        cat > "$test_dir/platformio.ini" << 'EOF'
        [platformio]
        default_envs = esp32dev
        
        [env]
        framework = arduino
        build_flags = 
            -DCOMPILE_TEST_ONLY
            -Wall
        
        [env:esp32dev]
        platform = espressif32
        board = esp32dev
        lib_deps = 
            https://github.com/ESP32Async/AsyncTCP.git
            bblanchon/ArduinoJson@^6.21.0
        EOF
        
        cd "$test_dir"
        echo "Running syntax check..."
        pio run

  library-structure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate library structure
      run: |
        # Check required files exist
        test -f library.json || (echo "library.json missing" && exit 1)
        test -f library.properties || (echo "library.properties missing" && exit 1)
        test -f README.md || (echo "README.md missing" && exit 1)
        test -d src || (echo "src directory missing" && exit 1)
        test -d examples || (echo "examples directory missing" && exit 1)
        
        # Check that main headers exist
        test -f src/ESPAsyncWebClient.h || (echo "Main header missing" && exit 1)
        
        # Check that examples compile structure is valid
        for example in examples/*; do
          if [ -d "$example" ]; then
            example_name=$(basename "$example")
            test -f "$example/$example_name.ino" || (echo "Example $example_name.ino missing" && exit 1)
          fi
        done
        
        echo "Library structure validation passed!"
